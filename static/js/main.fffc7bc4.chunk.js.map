{"version":3,"sources":["Header.js","OurStory.js","Rsvp.js","TheDayOf.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","class","OurStory","Rsvp","TheDayOf","App","src_Header","src_TheDayOf","src_OurStory","src_Rsvp","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAceA,MAXf,WACE,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gCAChBH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,kBACTJ,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,0CCoEOG,MAzEf,WACE,OACEL,EAAAC,EAAAC,cAAA,WAASC,UAAU,sBACjBH,EAAAC,EAAAC,cAAA,uBAEAF,EAAAC,EAAAC,cAAA,g/CAyBAF,EAAAC,EAAAC,cAAA,4pBAaAF,EAAAC,EAAAC,cAAA,knDCnCSI,MARf,WACE,OACEN,EAAAC,EAAAC,cAAA,WAASC,UAAU,QACjBH,EAAAC,EAAAC,cAAA,2BCYSK,MAdf,WACE,OACEP,EAAAC,EAAAC,cAAA,WAASC,UAAU,sBACjBH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACZH,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,4BCOOM,MAXf,WACE,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACO,EAAD,MACAT,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAACU,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fffc7bc4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"Header Header-hero container\">\r\n      <div class=\"Header-overlay\">\r\n        <h1>Karis & Nik</h1>\r\n        <h2>Are Getting Married</h2>\r\n      </div>\r\n    </header >\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './OurStory.css';\r\n\r\nfunction OurStory() {\r\n  return (\r\n    <section className=\"OurStory container\">\r\n      <h1>Our Story</h1>\r\n\r\n      <p>\r\n        Our story begins in July 2017 when Karis, after having thought about it\r\n        for a while, finally made her profile on Coffee Meets Bagel, an online\r\n        dating app. Little did she know that only days earlier, Nik, after some\r\n        prompting by a few wise friends, had updated his own profile with new\r\n        pictures and description. One day as Nik was going through his daily\r\n        Bagels, he saw Karis’ profile pop up. He would have to pay to connect\r\n        unless he thought that the app would automatically match them later\r\n        down the road, but nothing was guaranteed. Nik couldn’t pass up the\r\n        opportunity and decided to match. Karis, who still felt very new to\r\n        online dating, saw Nik pop up as a bagel in her account, noticed that\r\n        he wanted to connect with her, and decided this was worth consulting\r\n        her go-to relationship experts: her siblings. She took a screenshot of\r\n        Nik’s profile and sent it to the sibling committee. They gave her a\r\n        thumbs up, and so Karis and Nik connected. They started texting back\r\n        and forth, first about BBQ in Texas and then about their respective\r\n        work and home states. Eventually, they decided to meet. Nik suggested\r\n        Kata Robata because it’s a good restaurant and would be a good gauge on\r\n        whether Karis could weather Nik’s favorite food: sushi. Karis\r\n        cautiously agreed, excited about trying a new restaurant and meeting a\r\n        new person but unsure what to expect if she wasn’t interested. Nik was\r\n        excited and comfortable meeting someone new because he had been on\r\n        several failed dates.\r\n      </p>\r\n\r\n      <p>\r\n        When Karis and Nik finally met in person, they enjoyed dinner and good\r\n        conversation together. When Karis got home, she debriefed with her\r\n        parents about how she thought the date went, and Nik quickly followed\r\n        up with a clever text that made both her and her dad laugh. Nik knew he\r\n        wanted to see her again because of the ease of conversation between the\r\n        both of them and the common interests they shared. From there, Karis\r\n        and Nik continued to text and go on dates, which led to the occasional\r\n        phone calls, and eventually a conversation about their relationship.\r\n        They decided to make it official, and in October 2017, they went on\r\n        their (second) first date!\r\n      </p>\r\n\r\n      <p>\r\n        For the next year and a half, Karis and Nik had tons of fun dating.\r\n        They enjoyed cycling along the Houston bayous, playing flag football,\r\n        cheering on their respective basketball teams, traveling to visit\r\n        friends and attend weddings, and exploring Houston’s museums,\r\n        restaurants, and dessert shops. Throughout their dating, they shared a\r\n        common interest in escape room games with friends and family. This gave\r\n        Nik the idea to have an escape room at his house for Karis to go\r\n        through with hints and clues about their experiences and relationship.\r\n        Nik knew that he had a small window to propose before Karis would be\r\n        too stressed out with preparing for her dissertation defense. He\r\n        planned the escape room in his house and, under the guise of an already\r\n        scheduled date night, asked Karis to come over after she was done in\r\n        the lab. Karis, feeling a bit stressed that her dissertation defense\r\n        was in less than three weeks, rushed to his place from the lab. While\r\n        she was still driving over, Nik texted her the beginning of her mission\r\n        to save the universe from the dreadful Thanos by finding the stolen\r\n        Infinity Stone hidden in Nik’s house. Karis went through each puzzle\r\n        leading her to the Infinity Stone (an actual rock) and to the keys of\r\n        her escape car. As the garage door opened, Nik greeted her on her\r\n        success on getting the Infinity Stone only to inform her that she had\r\n        gotten the wrong stone. Karis looked at Nik with confusion with this\r\n        news as he knelt on one knee to present her the real stone she had been\r\n        searching for. With an enthusiastic yes, Nik had finally reached his\r\n        endgame and the universe was saved!\r\n      </p>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default OurStory;","import React from 'react';\r\nimport './Rsvp.css';\r\n\r\nfunction Rsvp() {\r\n  return (\r\n    <section className=\"Rsvp\">\r\n      <h1>RSVP!</h1>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Rsvp;","import React from 'react';\r\nimport './TheDayOf.css';\r\n\r\n\r\nfunction TheDayOf() {\r\n  return (\r\n    <section className='TheDayOf container'>\r\n      <h1>TheDayOf</h1>\r\n      <ul className=\"details\">\r\n        <li>Saturday The Twenty-Sixth of October</li>\r\n        <li>Two Thousand and Nineteen</li>\r\n        <li>Houston, TX</li>\r\n      </ul>\r\n    </section>\r\n\r\n  )\r\n}\r\n\r\nexport default TheDayOf;","import React from 'react';\nimport './App.css';\nimport Header from './Header.js';\nimport OurStory from './OurStory.js';\nimport Rsvp from './Rsvp.js';\nimport TheDayOf from './TheDayOf.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <TheDayOf />\n      <OurStory />\n      <Rsvp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}